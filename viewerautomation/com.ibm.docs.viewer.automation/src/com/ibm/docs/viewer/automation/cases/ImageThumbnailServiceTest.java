package com.ibm.docs.viewer.automation.cases;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.File;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.junit.BeforeClass;
import org.junit.Test;

import com.ibm.docs.viewer.automation.ViewerClient;
import com.ibm.docs.viewer.automation.config.ViewerAutomationConfig;
import com.ibm.docs.viewer.automation.util.ViewType;
import com.ibm.json.java.JSONObject;

public class ImageThumbnailServiceTest
{
  protected static final int DEFAULT_RETRY_INTERVAL = 1000;

  protected static final int DEFAULT_RETRY = 150;

  protected static ViewerClient vClient = null;

  protected static String sampleDir;

  protected static String repositoryId;

  private static Logger logger = Logger.getLogger(ImageThumbnailServiceTest.class.getName());

  @BeforeClass
  public static void setup()
  {
    vClient = ViewerClient.getInstance();
    try
    {
      vClient.login();
      sampleDir = ViewerAutomationConfig.getConfig().getSampleBase();
      repositoryId = ViewerClient.getRepositoryId();
    }
    catch (Exception e)
    {
      logger.log(Level.SEVERE, "Can't init the test case.", e);
      fail();
    }
  }

  protected String uploadFile(String fileName)
  {
    try
    {
      File f = new File(sampleDir + "/" + fileName);
      if (f.exists())
      {
        String fileId = vClient.uploadDocument(sampleDir + "/" + fileName);
        logger.info("Upload a new file. fileId = " + fileId);
        boolean res = vClient.queryUploadCacheStatus(repositoryId, fileId, DEFAULT_RETRY, DEFAULT_RETRY_INTERVAL);
        assertEquals("Upload conversion done.", res, true);
        res = vClient.queryThumbnailsCacheStatus(repositoryId, fileId, DEFAULT_RETRY, DEFAULT_RETRY_INTERVAL);
        assertEquals("Thumbnails were generated during upload conversion.", res, true);
        return fileId;
      }
      else
      {
        logger.warning("Can't find file: " + f.getAbsolutePath());
        fail();
      }
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
    return null;
  }

  protected void deleteThumbnails(String fileId)
  {
    try
    {
      vClient.deleteThumbnailCache(repositoryId, fileId);
      boolean res = vClient.queryThumbnailsCacheStatus(repositoryId, fileId, 0, DEFAULT_RETRY_INTERVAL);
      assertEquals("Thumbnails was removed.", res, false);
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }

  }

  protected void deleteDocCache(String fileId)
  {
    try
    {
      vClient.deleteDocCache(repositoryId, fileId);
      JSONObject jsonRes = vClient.queryDocCacheStatus(repositoryId, fileId);
      if (jsonRes != null)
      {
        boolean res = Boolean.parseBoolean((String) jsonRes.get(ViewerClient.CACHESTATUS_KEY_EXISTS));
        assertEquals("Document cache was removed.", res, false);
      }
      else
      {
        logger.warning(" Failed to query docCache status. Doc Id: " + fileId);
        fail();
      }
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
  }

  protected void createThumbnails(String fileId)
  {
    try
    {
      vClient.generateThumbnailEvent(repositoryId, fileId);
      boolean res = vClient.queryThumbnailsCacheStatus(repositoryId, fileId, DEFAULT_RETRY, DEFAULT_RETRY_INTERVAL);
      assertEquals("Thumbnails were generated by createthumbnail event.", res, true);
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
  }

  protected void viewFile(String fileId, ViewType type, String userAgent)
  {
    try
    {
      Map<String, String> r = vClient.openViewPage(fileId, repositoryId, type, userAgent);
      boolean isHTML = true;
      if (type == ViewType.IMAGE)
      {
        isHTML = false;
      }
      String jobId = r.get("jobId");
      if (!jobId.equals("null"))
      {
        boolean b = vClient.queryStatus(fileId, jobId, r.get("version"), repositoryId, isHTML, userAgent);
        assertEquals("View action is done successfully.", b, true);
        JSONObject jsonRes = vClient.queryDocCacheStatus(repositoryId, fileId, userAgent);
        if (jsonRes != null)
        {
          boolean res = Boolean.parseBoolean((String) jsonRes.get(ViewerClient.CACHESTATUS_KEY_VALID));
          assertEquals("Document cache is valid after view.", res, true);
        }
        else
        {
          logger.warning(" Failed to query docCache status. Doc Id: " + fileId);
          fail();
        }
      }
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }

  }

  protected void viewFile(String fileId)
  {
    viewFile(fileId, ViewType.IMAGE, null);
  }

  protected void viewFileByIE8(String fileId)
  {
    viewFile(fileId, ViewType.IMAGE, ViewerClient.MSIE8);
  }

  @Test
  public void testUploadConversion()
  {
    String fileId = uploadFile("sample.doc");
    try
    {
      boolean res = vClient.queryThumbSrvConversionStatus(repositoryId, fileId, DEFAULT_RETRY, DEFAULT_RETRY_INTERVAL);
      assertEquals("One-page thumbnail conversion were not excuted.", res, false);
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
  }

  @Test
  public void testViewWithoutCache()
  {
    String fileId = uploadFile("sample.doc");
    try
    {
      deleteThumbnails(fileId);

      deleteDocCache(fileId);

      viewFile(fileId);

      boolean res = vClient.queryThumbnailsCacheStatus(repositoryId, fileId, 0, DEFAULT_RETRY_INTERVAL);
      assertEquals("Thumbnails were generated after view.", res, true);
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
  }

  @Test
  public void testViewOnUploadCache()
  {
    String fileId = uploadFile("sample.doc");
    try
    {
      deleteThumbnails(fileId);

      viewFile(fileId);

      boolean res = vClient.queryThumbnailsCacheStatus(repositoryId, fileId, 0, DEFAULT_RETRY_INTERVAL);
      assertEquals("Thumbnails were generated after view.", res, false);
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
  }

  @Test
  public void testViewOnValidCache()
  {
    String fileId = uploadFile("sample.doc");
    try
    {
      viewFile(fileId);

      deleteThumbnails(fileId);

      viewFile(fileId);

      boolean res = vClient.queryThumbnailsCacheStatus(repositoryId, fileId, DEFAULT_RETRY, DEFAULT_RETRY_INTERVAL);
      assertEquals("Thumbnails were generated after view on valid cache.", res, true);
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
  }

  @Test
  public void testGenerateThumbnailOnUploadCache()
  {
    String fileId = uploadFile("sample.doc");
    try
    {
      deleteThumbnails(fileId);

      createThumbnails(fileId);
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
  }

  @Test
  public void testGenerateThumbnailWithoutCache()
  {
    String fileId = uploadFile("sample.doc");
    try
    {
      deleteThumbnails(fileId);

      deleteDocCache(fileId);

      createThumbnails(fileId);
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
  }

  @Test
  public void testGenerateThumbnailOnValidCache()
  {
    String fileId = uploadFile("sample.doc");
    try
    {
      viewFile(fileId);

      deleteThumbnails(fileId);

      createThumbnails(fileId);
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
  }

  @Test
  public void testMoveFileToTrash()
  {
    String fileId = uploadFile("sample.doc");

    try
    {
      vClient.removeDocument(fileId);

      boolean res = vClient.queryThumbnailsCacheStatus(repositoryId, fileId, DEFAULT_RETRY, DEFAULT_RETRY_INTERVAL);
      assertEquals("Thumbnails were purged after file is removed.", res, false);

    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
  }

  @Test
  public void testUploadPDF()
  {
    String fileId = uploadFile("sample.pdf");
    try
    {
      boolean res = vClient.queryThumbSrvConversionStatus(repositoryId, fileId, 0, DEFAULT_RETRY_INTERVAL);
      assertEquals("One-page thumbnail conversion were excuted successfully.", res, false);
    }
    catch (Exception e)
    {
      logger.warning(" Exception: " + e);
      fail();
    }
  }

}
