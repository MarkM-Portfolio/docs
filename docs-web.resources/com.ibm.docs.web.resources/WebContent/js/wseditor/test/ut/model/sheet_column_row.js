dojo.provide("websheet.test.ut.sheet_column_row");

/**
 * Suite of model algorithm from Sheet, Row and Column
 */
describe("websheet.tests.ut.ut_sheet_column_row", function() {
	
	var wsconst = websheet.Constant;
	var typeconst = wsconst.ValueCellType;

	var _document = new websheet.model.Document();
	
	var styleManager = _document._styleManager;
	
	var dummyColumnIDArray = function(n) {
		// summary: generate dummy column ID array from co1 to coN
		var ret = [];
		for (var i = 1; i <= n; i++) {
			ret.push("co" + i);
		}
		return ret;
	};

	var dummyColumnIDMapForSheet = function(n, sheet) {
		// summary: generate dummy column ID array from co1 to coN
		var m = sheet._colIdMap = {};
		for (var i = 1; i <= n; i++) {
			m["co" + i] = i - 1;
		}
	};
	

	beforeEach(function() {
		utils.bindDocument(_document);
	});
	
	afterEach(function() {
		utils.unbindDocument();
	});
	
	it("can create a sheet model", function() {
		var sheet = builders.sheet(_document).done();
		doh.isNot(null, sheet, "generated a valid, not null sheet");
		doh.is("st0", sheet._id);
		doh.is("st0", sheet._name);
	});

	it("can create a row model", function() {
		var sheet = builders.sheet(_document).row(1).done();
		expect(sheet._rows.length).toBe(1);
		var row = sheet._rows[0];
		doh.isNot(null, row, "generated a valid, not null row");
		doh.is("ro1", row._id);
	});
	
	it("can create a row model by sheet._createRow", function() {
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		sheet._createRow(1, "ro1", 15);
		expect.model(sheet).rowAtIndex(1).height(15);
	});
	
	it("can create a cell with row _createCellOnLoad", function() {
		/*
		 * _createCellOnLoad (
		 * @param colIndex 		cell position
		 * @param colid			column id
		 * @param value			cell value
		 * @param calculateValue
		 * @param styleid		cell style id
		 * @param repeatednum	cell repeated number
		 * @param link 			hyperlink
		 * @param bNotCreateNull	if set to true, not insert null cell and return null
		 * @param bPR
		 * @param cellRef		the cell/range references of the current cell if it is formula
		 * @param tokenJson		syntax tree with priority can be generated by other parser framework for formula cell
		 * @param bNumber			whether it's numeric like 1.1e+3,1.1,etc.
		 * @param formulaSharedIndex	the autofill formula index
		 * )
		 */		
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		var row = new websheet.model.Row(sheet, "ro1");
		row._createCellOnLoad(1,
				"co1",
				1,
				null,
				0,
				0,
				null);
		// created cell appear in row._valueCells;
		var cell = row._valueCells[0];
		doh.isNot(null, cell);
		doh.is("co1", cell._id);
		doh.is(1, cell.getRawValue());
	});
	
	it("can load cells of one row by row.load", function() {
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		var row = new websheet.model.Row(sheet, "ro1");

		var testData = utils.getTestData("sheet_column_row_cell/row_load_basic.json");
		
		dummyColumnIDMapForSheet(1, sheet);
		row.load(testData, dummyColumnIDArray(1));
		
		// created cell appear in row._valueCells;
		var cell = row._valueCells[0];
		doh.isNot(null, cell);
		doh.is("co1", cell._id);
		doh.is(1, cell.getRawValue());
	});

	it("can load style cells of one row by row.load", function() {
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		var row = new websheet.model.Row(sheet, "ro1");

		var testData = utils.getTestData("sheet_column_row_cell/row_load_with_style.json");
		
		dummyColumnIDMapForSheet(1, sheet);
		row.load(testData, dummyColumnIDArray(1));
		
		// created cell appear in row._styleCells
		var cell = row._styleCells[0];
		doh.isNot(null, cell);
		doh.is("co1", cell._id);
		doh.is("ce0", cell._styleId);
		doh.is(0, cell._repeatednum);
	});

	it("can create cells with formula value, triggers it to be a formula", function() {
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		sheet._createRow(1, "ro1", 15);
		dummyColumnIDMapForSheet(7, sheet);
		var row = sheet._rows[0];
		row._createCellOnLoad(1,
				"co1",
				"=A1"
				);
		var cell = row._valueCells[0];
		doh.isNot(null, cell);
		doh.is("co1", cell._id);
		doh.is("=A1", cell._rawValue);
		doh.is("=A1", cell._calculatedValue);
	});

	it("can create cells with calculated value", function() {
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		sheet._createRow(1, "ro1", 15);
		dummyColumnIDMapForSheet(7, sheet);
		var row = sheet._rows[0];
		row._createCellOnLoad(1,
				"co1",
				"=A1",
				1,
				null,
				(typeconst.NUMBER << 3) | (typeconst.FORMULA_NORMAL) 
				);
		var cell = row._valueCells[0];
		doh.isNot(null, cell);
		doh.is("co1", cell._id);
		doh.is("=A1", cell._rawValue);
		doh.strictIs(1, cell._calculatedValue);
	});

	it("calculated cells are single-quote-escaped", function() {
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		sheet._createRow(1, "ro1", 15);
		dummyColumnIDMapForSheet(7, sheet);
		var row = sheet._rows[0];
		row._createCellOnLoad(1,
				"co1",
				"=A1",
				"'1",
				null,
				(typeconst.STRING << 3) | (typeconst.FORMULA_NORMAL)
				);
		var cell = row._valueCells[0];
		doh.isNot(null, cell);
		doh.is("co1", cell._id);
		doh.is("=A1", cell._rawValue);
		doh.strictIs("1", cell._calculatedValue);
	});
	
	it("can load cells with various types", function() {
		_document.enableFormula = true;
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		sheet._createRow(1, "ro1", 15);

		var testData = utils.getTestData("sheet_column_row_cell/row_load_cell_types.json");
		
		dummyColumnIDMapForSheet(8, sheet);
		var row = sheet._rows[0];
		row.load(testData, dummyColumnIDArray(8));
		
		// created cell appear in row._valueCells;
		expect.model(sheet).rowAtIndex(1)
			.valueCellAtIndex(1).value(1).type(typeconst.NUMBER << 3 | typeconst.FORMULA_NONE)
			.valueCellAtIndex(2).value(1).type(typeconst.NUMBER << 3 | typeconst.FORMULA_NONE)
			.valueCellAtIndex(3).value("string").type(typeconst.STRING << 3 | typeconst.FORMULA_NONE)
			.valueCellAtIndex(4).value("=A1").type(typeconst.UNKNOWN << 3 | typeconst.FORMULA_NORMAL)
			.valueCellAtIndex(5).setCalculated().value("=A1").cvalue("string").type(typeconst.STRING << 3 | typeconst.FORMULA_NORMAL)
			.valueCellAtIndex(6).value(1).type(typeconst.BOOLEAN << 3 | typeconst.FORMULA_NONE)
			.valueCellAtIndex(7).value(1).type(typeconst.NUMBER << 3 | typeconst.FORMULA_NONE)
			.valueCellAtIndex(8).value(1).type(typeconst.BOOLEAN << 3 | typeconst.FORMULA_NONE);
	});
	
	it("can load and fix boolean cell without correct cell type", function() {
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		sheet._createRow(1, "ro1", 15);

		var testData = utils.getTestData("sheet_column_row_cell/row_load_unfixed_boolean_cells.json");
		
		// dummy a boolean style code
		var style = { _attributes: { "cat": "boolean" } };
		_document._styleManager.styleMap["ce1"] = style;
		
		dummyColumnIDMapForSheet(8, sheet);
		var row = sheet._rows[0];
		row.load(testData, dummyColumnIDArray(8));
		
		// created cell appear in row._valueCells;
		expect.model(sheet).rowAtIndex(1)
			.valueCellAtIndex(1).value(1).type(typeconst.BOOLEAN << 3 | typeconst.FORMULA_NONE)
			.valueCellAtIndex(2).value(0).type(typeconst.BOOLEAN << 3 | typeconst.FORMULA_NONE);
	});
	
	it("row can _createCell value cells, empty value cells take '' as raw value, type as STRING", function() {
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		sheet._createRow(1, "ro1", 15);

		var testData = utils.getTestData("sheet_column_row_cell/row_load_cell_types.json");
		
		dummyColumnIDMapForSheet(8, sheet);
		var row = sheet._rows[0];

		row._createCell(1);
		expect.model(sheet).rowAtIndex(1).valueCellAtIndex(1).value("").type(typeconst.STRING << 3);
	});
	
	it("call cell constructor passing value as null makes a cell with '' as raw value and STRING as type", function() {
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		sheet._createRow(1, "ro1", 15);

		var testData = utils.getTestData("sheet_column_row_cell/row_load_cell_types.json");
		
		dummyColumnIDMapForSheet(8, sheet);
		var row = sheet._rows[0];
		
		var cell = new websheet.model.Cell(row, "co1", /* rn */ 0, null);
		row._valueCells[0] = cell;
		expect.model(sheet).rowAtIndex(1).valueCellAtIndex(1).value("").type(typeconst.STRING << 3);
	});
	

	it("create cell with string content and type 0", function() {
		var sheet = new websheet.model.Sheet(_document, "st1", "Sheet1");
		sheet._createRow(1, "ro1", 15);
		dummyColumnIDMapForSheet(7, sheet);
		var row = sheet._rows[0];
		row._createCellOnLoad(1,
				"co1",
				"1",
				1,
				null,
				(typeconst.NUMBER << 3) | (typeconst.FORMULA_NONE) 
				);
		var cell = row._valueCells[0];
		doh.isNot(null, cell);
		doh.is("co1", cell._id);
		doh.is((typeconst.NUMBER << 3) | (typeconst.FORMULA_NONE), cell._type);
		// no parse in the cell, just accepted the value
		doh.strictIs("1", cell._rawValue);
		doh.strictIs("1", cell._calculatedValue);
	});
	
	describe("setMultipleColWidth", function(){
		var _document = new websheet.model.Document();
		var sheet = null;
		
		beforeEach(function() {
			sheet = builders.sheet(_document,"Sheet1").columnMeta(3,[2,40]).done();
		});
		
		it("can set multiple col situation 1 ", function(){
			var json = {"rn":1,"w":60};
			var data = {"columns":{"B":json}};
			sheet.setColumns(2, 3, data);
			
			var colB = sheet.getColumn(2,true);
			doh.isNot(null,colB);
			doh.is(60,colB._width);
			var colC = sheet.getColumn(3,true);
			doh.isNot(null,colC);
			doh.is(60,colC._width);
			var colD = sheet.getColumn(4, true);
			doh.isNot(null,colD);
			doh.is(40,colD._width);
		});
		
		it("can set multiple col situation 2 ", function(){
			var json = {"rn":1,"w":60};
			var data = {"columns":{"E":json}};
			sheet.setColumns(5, 6, data);
			
			var colE = sheet.getColumn(5,true);
			doh.isNot(null,colE);
			doh.is(60,colE._width);
			var colF = sheet.getColumn(6,true);
			doh.isNot(null,colF);
			doh.is(60,colF._width);
			
			var colC = sheet.getColumn(3,true);
			doh.isNot(null,colC);
			doh.is(40,colC._width);
			doh.is(1,colC._repeatedNum);
		});
		
		it("can set multiple col situation 3 ", function(){
			var json = {"rn":1,"w":60};
			var data = {"columns":{"D":json}};
			sheet.setColumns(4, 5, data);
			
			var colD = sheet.getColumn(4,true);
			doh.isNot(null,colD);
			doh.is(60,colD._width);
			var colE = sheet.getColumn(5,true);
			doh.isNot(null,colE);
			doh.is(60,colE._width);
			
			var colC = sheet.getColumn(3,true);
			doh.isNot(null,colC);
			doh.is(40,colC._width);
			doh.is(0,colC._repeatedNum);
		});
		
		it("can undo set multiple col width", function(){
			var columns = {"B":{"w":60},"C":{"w":null},"D":{"w":75}};
			var data = {"columns":columns};
			sheet.setColumns(2, 4, data);
			
			var colB = sheet.getColumn(2,true);
			doh.isNot(null,colB);
			doh.is(60,colB._width);
			var colC = sheet.getColumn(3,true);
			doh.isNot(null,colC);
			doh.is(null,colC._width);
			var colD = sheet.getColumn(4,true);
			doh.isNot(null,colD);
			doh.is(75,colD._width);
		});
		
	});
	
	describe("test delete columns", function(){
		var _document = new websheet.model.Document();
		var sheet = row = null;
		
		beforeEach(function() {
			var cells = [['colspan', 3], null, null, ['colspan', 3], null, null, ['colspan', 3]];
			sheet = builders.sheet(_document, "sheet1").row(1, cells).done();
			//A stub we do not care.
			sheet._idManager.deleteColAtIndex = function() {return true;}
			row = sheet._rows[0];
			doh.is(3, row._coverInfos.length);
			dojo.forEach(row._coverInfos, function(cell){
				doh.is(3, cell._colSpan);
				doh.is(2, cell._repeatednum);
			});
		});
		
		it("delete the master cell split the merge cell", function(){
			sheet.deleteColumns(3, 4);
			doh.is(2, row._coverInfos.length);
			doh.is(2, row._coverInfos[0]._colSpan);
			doh.is(1, row._coverInfos[0]._repeatednum);
			doh.is(3, row._coverInfos[1]._colSpan);
			doh.is(2, row._coverInfos[1]._repeatednum);
			
		});
		
		it("delete the part of the merge cell change it's colspan and repeat", function(){
			sheet.deleteColumns(2, 2);
			doh.is(3, row._coverInfos.length);
			doh.is(2, row._coverInfos[0]._colSpan);
			doh.is(1, row._coverInfos[0]._repeatednum);
			doh.is(3, row._coverInfos[1]._colSpan);
			doh.is(2, row._coverInfos[1]._repeatednum);
		});
		
		it("delete other cells except the master cell also split the merged cell", function(){
			sheet.deleteColumns(2, 3);
			doh.is(2, row._coverInfos.length);
			doh.is(3, row._coverInfos[0]._colSpan);
			doh.is(2, row._coverInfos[0]._repeatednum);
			doh.is(3, row._coverInfos[1]._colSpan);
			doh.is(2, row._coverInfos[1]._repeatednum);
		});
		//...
	});
	
	describe("protection", function() {
		var sidUl;
		var dcs = "defaultcellstyle";
		var sidS0;
		
		beforeEach(function() {
			var code = {};
			code[websheet.Constant.Style.PROTECTION_UNLOCKED] = true;
			sidUl = styleManager.addStyle(code);
			code = {};
			code[websheet.Constant.Style.BACKGROUND_COLOR] = "#ff0000";
			sidS0 = styleManager.addStyle(code);
		});
		
		afterEach(function() {
			;
		});
		
		
		it("sheet, cut range", function(){
			var sheet = builders.sheet(_document,"protected").done();
			sheet.clearRange(1,2,1,2,true);
			var row = sheet._rows[0];
			
			doh.isNot(null, row);
			var cell = row._styleCells[0];
			doh.isNot(null, cell);
			doh.is(1, cell._repeatednum);
			doh.is(false, !styleManager.getAttr(cell.getStyle(),websheet.Constant.Style.PROTECTION_UNLOCKED));
			doh.is(false, !styleManager.getAttr(cell.getStyle(),websheet.Constant.Style.PROTECTION_UNLOCKED));
		});
		
		it("sheet, cut row", function(){
			var sheet = builders.sheet(_document,"protected").done();
			sheet.deleteRows(1,2,true);
			var row = sheet._rows[0];
			
			doh.isNot(null, row);
			doh.is(1, row._repeatedNum);
			var cell = row._styleCells[0];
			doh.isNot(null, cell);
			doh.is(1023, cell._repeatednum);
			doh.is(false, !styleManager.getAttr(cell.getStyle(),websheet.Constant.Style.PROTECTION_UNLOCKED));
			doh.is(false, !styleManager.getAttr(cell.getStyle(),websheet.Constant.Style.PROTECTION_UNLOCKED));
		});
		
		it("sheet, cut column", function(){
			var sheet = builders.sheet(_document,"protected").done();
			sheet.deleteColumns(1,2,true);
			var col = sheet._columns[0];
			
			doh.isNot(null, col);
			doh.is(1, col._repeatedNum);
			doh.is(false, !styleManager.getAttr(col.getStyle(),websheet.Constant.Style.PROTECTION_UNLOCKED));
			doh.is(false, !styleManager.getAttr(col.getStyle(),websheet.Constant.Style.PROTECTION_UNLOCKED));
		});
		
		it("sheet, isCellProtected, there is row model", function(){
			var sheet = builders.sheet(_document,"protected").row(1,[[sidS0,1],,[sidUl,1]]).done();
			
			doh.is(true, sheet.isCellProtected(1, 1));
			doh.is(true, sheet.isCellProtected(1, 2));
			doh.is(false, sheet.isCellProtected(1, 3));
			doh.is(false, sheet.isCellProtected(1, 4));
		});
		
		it("sheet, isCellProtected, there is not row model", function(){
			var sheet = builders.sheet(_document,"protected").columnMeta(1,[1,sidS0]).columnMeta(3,[1,sidUl]).done();
			
			doh.is(true, sheet.isCellProtected(1, 1));
			doh.is(true, sheet.isCellProtected(1, 2));
			doh.is(false, sheet.isCellProtected(1, 3));
			doh.is(false, sheet.isCellProtected(1, 4));
		});
		
		it("sheet, isRowProtected, don't need to CheckCol", function(){
			var sheet = builders.sheet(_document,"protected").row([1,3],[[sidUl,1023]]).row(5).done();
			
			doh.is(false, sheet.isRowProtected(2,3));
			doh.is(true, sheet.isRowProtected(2,5));
		});
		
		it("sheet, isRowProtected, need to CheckCol", function(){
			var sheet = builders.sheet(_document,"protected").row([1,3],[[sidUl,1023]]).done();
			
			doh.is(false, sheet.isRowProtected(2,3));
			doh.is(true, sheet.isRowProtected(2,6));
		});
		
		it("sheet, _isColumnsProtected, there is not columns", function(){
			var sheet = builders.sheet(_document,"protected").done();
			doh.is(true, sheet._isColumnsProtected(2,6));
		});
		
		it("sheet,  _isColumnsProtected", function(){
			var sheet = builders.sheet(_document,"protected").columnMeta(1,[1,sidS0]).columnMeta(4,[1,sidUl]).columnMeta(6,[1,sidUl]).done();

			doh.is(true, sheet._isColumnsProtected());
			doh.is(true, sheet._isColumnsProtected(3,4));
			doh.is(true, sheet._isColumnsProtected(1,2));			
			doh.is(false, sheet._isColumnsProtected(5,6));
			doh.is(true, sheet._isColumnsProtected(5,18));
		});
		
		it("sheet, isRangeProtected", function(){
			var sheet = builders.sheet(_document,"protected").row([1,3])
						.row([5,3],[[sidS0,1],,[sidUl,1]])
						.row([9,3],[[sidS0,1],,[sidUl,1]]).done();

			doh.is(true, sheet.isRangeProtected(18,24,2,3));
			doh.is(true, sheet.isRangeProtected(2,3,2,3));
			doh.is(false, sheet.isRangeProtected(5,6,3,4));
			doh.is(false, sheet.isRangeProtected(5,10,3,4));
			doh.is(true, sheet.isRangeProtected(10,15,3,4));
		});
		
		it("sheet, isColumnProtected", function(){
			var sheet = builders.sheet(_document,"protected").row([1,g_maxSheetRows - 1],[[sidS0,1],,[sidUl,1]]).done();
	
			doh.is(true, sheet.isColumnProtected(1,2));
			doh.is(false, sheet.isColumnProtected(3,4));
		});
		
		it("row, isCellProtected", function(){
		    var sheet = builders.sheet(_document,"protected").columnMeta(3,[sidUl])
		    			.row(1,[[dcs,1],,,[sidUl,1]]).done();
			var row = sheet._rows[0];
	
			doh.is(true, row.isCellProtected(1));
			doh.is(false, row.isCellProtected(3));
			doh.is(false, row.isCellProtected(4));
		});
		
		it("row, hasProtectedCell", function(){
			 var sheet = builders.sheet(_document,"protected").columnMeta(3,[sidUl])
			 			.row(1,[[dcs,1],,,[sidUl,1],,[sidUl,1]]).done();
			var row = sheet._rows[0];
	
			doh.is(true, row.hasProtectedCell());//the whole row.
			doh.is(false, row.hasProtectedCell(3,7));
			doh.is(false, row.hasProtectedCell(5,7));
			doh.is(true, row.hasProtectedCell(8,9));
			
			builders.sheet(sheet).row(2,[[sidS0,1],,[sidUl,1],,[dcs,1]]);
			row = sheet._rows[1];
			doh.is(true, row.hasProtectedCell(1,3));
			doh.is(true, row.hasProtectedCell(5,7));
			
			builders.sheet(sheet).row(3,[[sidUl,1]]);
			row = sheet._rows[2];
			doh.is(false, row.hasProtectedCell(1,3));
			doh.is(true, row.hasProtectedCell(1,4));
			
			builders.sheet(sheet).row(4,[[sidUl,1],,,[sidUl,1]]);
			row = sheet._rows[3];
			doh.is(false, row.hasProtectedCell(1,4));
		});
		
		it("row, hasProtectedCell, the whole row", function(){
			var sheet = builders.sheet(_document,"protected").row(1).done();
			var row = sheet._rows[0];
			doh.is(true, row.hasProtectedCell());//the whole row.
			
			builders.sheet(sheet).row(2,[[sidUl,1023]]);
			row = sheet._rows[1];
	
			doh.is(false, row.hasProtectedCell());//the whole row.
		});	

	});	
});
